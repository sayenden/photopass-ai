AWSTemplateFormatVersion: '2010-09-09'
Description: 'PhotoPass AI Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
  
  DomainName:
    Type: String
    Default: 'photopass.ai'
    Description: 'Domain name for the application'

Resources:
  # S3 Bucket for photo storage
  PhotoStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'photopass-${Environment}-photos'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteTempFiles
            Status: Enabled
            ExpirationInDays: 1
            Prefix: 'temp/'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # Lambda function for photo processing
  PhotoProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'photopass-${Environment}-processor'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return { statusCode: 200, body: 'Photo processing function' };
          };
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          GEMINI_API_KEY: !Ref GeminiApiKey
          S3_BUCKET: !Ref PhotoStorageBucket

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'photopass-${Environment}-api'
      Description: 'PhotoPass AI API Gateway'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # DynamoDB for user data and compliance reports
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'photopass-${Environment}-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ComplianceReportsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'photopass-${Environment}-compliance'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: reportId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: reportId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # CloudFront distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt PhotoStorageBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed caching disabled
        PriceClass: PriceClass_100

  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub 'OAI for PhotoPass ${Environment}'

  # Secrets Manager for API keys
  GeminiApiKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'photopass-${Environment}-gemini-key'
      Description: 'Gemini API Key for PhotoPass AI'
      SecretString: !Sub |
        {
          "apiKey": "your-gemini-api-key-here"
        }

Outputs:
  S3BucketName:
    Description: 'S3 Bucket for photo storage'
    Value: !Ref PhotoStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
  
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  CloudFrontUrl:
    Description: 'CloudFront Distribution URL'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontUrl'
